// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using Soenneker.Resend.OpenApiClient.ApiKeys;
using Soenneker.Resend.OpenApiClient.Audiences;
using Soenneker.Resend.OpenApiClient.Broadcasts;
using Soenneker.Resend.OpenApiClient.Domains;
using Soenneker.Resend.OpenApiClient.Emails;
using Soenneker.Resend.OpenApiClient.Templates;
using Soenneker.Resend.OpenApiClient.Webhooks;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Soenneker.Resend.OpenApiClient
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ResendOpenApiClient : BaseRequestBuilder
    {
        /// <summary>The apiKeys property</summary>
        public global::Soenneker.Resend.OpenApiClient.ApiKeys.ApiKeysRequestBuilder ApiKeys
        {
            get => new global::Soenneker.Resend.OpenApiClient.ApiKeys.ApiKeysRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The audiences property</summary>
        public global::Soenneker.Resend.OpenApiClient.Audiences.AudiencesRequestBuilder Audiences
        {
            get => new global::Soenneker.Resend.OpenApiClient.Audiences.AudiencesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The broadcasts property</summary>
        public global::Soenneker.Resend.OpenApiClient.Broadcasts.BroadcastsRequestBuilder Broadcasts
        {
            get => new global::Soenneker.Resend.OpenApiClient.Broadcasts.BroadcastsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The domains property</summary>
        public global::Soenneker.Resend.OpenApiClient.Domains.DomainsRequestBuilder Domains
        {
            get => new global::Soenneker.Resend.OpenApiClient.Domains.DomainsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The emails property</summary>
        public global::Soenneker.Resend.OpenApiClient.Emails.EmailsRequestBuilder Emails
        {
            get => new global::Soenneker.Resend.OpenApiClient.Emails.EmailsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The templates property</summary>
        public global::Soenneker.Resend.OpenApiClient.Templates.TemplatesRequestBuilder Templates
        {
            get => new global::Soenneker.Resend.OpenApiClient.Templates.TemplatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webhooks property</summary>
        public global::Soenneker.Resend.OpenApiClient.Webhooks.WebhooksRequestBuilder Webhooks
        {
            get => new global::Soenneker.Resend.OpenApiClient.Webhooks.WebhooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Resend.OpenApiClient.ResendOpenApiClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResendOpenApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://api.resend.com";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
